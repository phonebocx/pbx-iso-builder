TOOLS += kvm vncviewer
PKG_kvm=qemu-system-x86

# This needs some manual host wrangling before it will work.
#
#  apt-get -y install qemu-kvm qemu-utils
#  Enable ip forwarding in /etc/sysctl
#  Make sure there's a bridge br0 connected to a network with a dhcp server
#  /etc/qemu/bridge.conf needs to contain 'allow br0'
#  iptables -I DOCKER-USER -j ACCEPT (otherwise docker rejects forwarding)
#  A good chunk of luck.

KVMRAM=2G
KVMCPUS=2
# You can set various CPU emulation types here. The list of known
# CPU types is here:
#   https://qemu-project.gitlab.io/qemu/system/qemu-cpu-models.html
#
# Note that Westmere doesn't boot, as the kernel requires later than that.
# If you DO have a Westmere CPU, set -accel tcp and KVMCPU
#
# Example:
#KVMCPU=Broadwell
#KVMCPU=Westmere-v1
KVMCPU=host

# This can be 'kvm' or 'tcg' - tcg is software emulation, 'kvm' uses
# the hosts KVM kernel module. If 'kvm' errors, it means that the host
# that this is running on does not have KVM accelleration enabled. Fix
# the host, or set it to 'tcg'
#KVMACCEL=-accel tcg
KVMACCEL=-accel kvm

KVMNETCONF=-net nic,model=virtio,macaddr=52:54:00:00:00:01 -net nic,model=virtio,macaddr=52:54:00:00:00:02 -net bridge,br=br0
KVMKEYS=lctrl-lalt
KVMDISPLAY=-display gtk
# When booting in BIOS mode, gtk display hangs. No idea why. Use VNC (fast) or
# sdl (massively slow) instead.
#
# This listens on port 5910 for VGA connections.
VNCDEF=127.0.0.1:10
#
# This is the bios that is used
UCODENAME ?= OVMF_CODE_4M.fd
UCODE=-drive if=pflash,unit=0,format=raw,readonly=on,file=/usr/share/OVMF/$(UCODENAME)
# This is the uefi variable store
UVARSNAME ?= OVMF_VARS_4M.fd
UVARS=-drive if=pflash,unit=1,format=raw,file=src/$(UVARSNAME)
UEFIBOOT=$(UCODE) $(UVARS)

KVMVGA=-vga vmware
# -vga vmware is to stop grub having issues on startup. Without it, things like
# 'videoinfo' just hang. I found the tip here:
#    https://askubuntu.com/questions/1234203/video-problems-with-efi-boot-on-kvm-qemu

TESTUUID=36e26dd9-91a0-4547-b197-bf28ce57cfe9
SMBIOS=-smbios type=1,manufacturer=HonestRob,product=IsoTest,version=31337,serial=01189998819991197253,uuid=$(TESTUUID)

MMCIMAGE=/usr/local/build/mmcblk.raw

$(SRCDIR)/testimg.qcow2: | $(SRCDIR)/$(UVARSNAME)
	qemu-img create -f qcow2 src/testimg.qcow2 80G

$(SRCDIR)/OVMF_%.fd:
	@cp /usr/share/OVMF/$(@F) $@

.PHONY: isoclean isotest
isoclean:
	rm -f $(SRCDIR)/testimg.qcow2 $(SRCDIR)/OVMF*
	$(MAKE) isotest

# ISOFINAL is from 002-theme
isotest: $(ISOFINAL) | $(SRCDIR)/testimg.qcow2 /etc/qemu/bridge.conf
	kvm -cpu $(KVMCPU) $(KVMACCEL) -smp cpus=$(KVMCPUS) -m $(KVMRAM) $(KVMNETCONF) $(KVMDISPLAY) \
	-cdrom $< $(UEFIBOOT) -drive file=$(SRCDIR)/testimg.qcow2,cache=unsafe,discard=ignore,detect-zeroes=off $(KVMVGA) $(SMBIOS)


# This does not have full networking, and is purely to be a fast and
# simple way to test the iso. SNAPSHOT is disabled as it adds a few seconds
# to a bootup of the vm.
test: $(ISOFINAL) | $(MMCIMAGE)
	@[ ! -e "$(SRCDIR)/$(UVARSNAME)" ] && $(MAKE) $(SRCDIR)/$(UVARSNAME) || :
	kvm -cpu $(KVMCPU) $(KVMACCEL) -smp cpus=$(KVMCPUS) -m $(KVMRAM) $(KVMDISPLAY) \
	$(xSNAPSHOT) $(UEFIBOOT) $(KVMVGA) $(HWSMBIOS) \
	-drive file=$<,if=none,id=cdrom,format=raw \
	-device ide-cd,drive=cdrom,bootindex=1 \
	-drive format=raw,file=$| $(BOOTMENU)

# Same for this, but this is in BIOS mode, not uefi. For some strange reason
# you can't use gtk for BIOS mode VMs, it hangs. So we use vncviewer
# See bug: https://gitlab.com/qemu-project/qemu/-/issues/2897
biostest: $(ISOFINAL) | $(MMCIMAGE)
	@[ ! -e "$(SRCDIR)/$(UVARSNAME)" ] && $(MAKE) $(SRCDIR)/$(UVARSNAME) || :
	@echo 'VNC Viewer will attempt to connect to $(VNCDEF) in one second. Press ^C here to terminate.'
	@( sleep 1; vncviewer $(VNCDEF) ) &
	kvm -cpu $(KVMCPU) $(KVMACCEL) -smp cpus=$(KVMCPUS) -m $(KVMRAM) \
	-display vnc=$(VNCDEF) $(KVMVGA) $(HWSMBIOS) \
	-drive file=$<,if=none,id=cdrom,format=raw \
	-device ide-cd,drive=cdrom,bootindex=1 \
	-drive format=raw,file=$| $(BOOTMENU)


$(MMCIMAGE):
	truncate --size=32G $(MMCIMAGE)

/etc/qemu/bridge.conf:
	@echo 'ERROR: '
	@echo '  QEMU needs to be set up correctly on this host. See Makefile.isotest for guidelines'
	@echo '  Sorry.'
	@exit 99
