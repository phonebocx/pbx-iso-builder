TOOLS += kvm
PKG_kvm=qemu-system-x86

# Display is provided by imagemagick
PREREQS += /usr/bin/display
PKG_display=imagemagick

# This needs some manual host wrangling before 'make test' will work. Be warned!
#
#  apt-get -y install qemu-kvm qemu-utils
#  Enable ip forwarding in /etc/sysctl
#  Make sure there's a bridge br0 connected to a network with a dhcp server
#  /etc/qemu/bridge.conf needs to contain 'allow br0'
#  iptables -I DOCKER-USER -j ACCEPT (otherwise docker rejects forwarding)
#  A good chunk of luck.

KVMRAM=2G
KVMCPUS=2
# You can set various CPU emulation types here. The list of known
# CPU types is here:
#   https://qemu-project.gitlab.io/qemu/system/qemu-cpu-models.html
#
# Note that Westmere doesn't boot, as the kernel requires later than that.
# If you DO have a Westmere CPU, set -accel tcp and KVMCPU
#
# Example:
#KVMCPU=Broadwell
#KVMCPU=Westmere-v1
KVMCPU=host

# This can be 'kvm' or 'tcg' - tcg is software emulation, 'kvm' uses
# the hosts KVM kernel module. If 'kvm' errors, it means that the host
# that this is running on does not have KVM accelleration enabled. Fix
# the host, or set it to 'tcg'
#KVMACCEL=-accel tcg
KVMACCEL=-accel kvm

KVMNETCONF=-net nic,model=virtio,macaddr=52:54:00:00:00:01 -net nic,model=virtio,macaddr=52:54:00:00:00:02 -net bridge,br=br0
KVMKEYS=lctrl-lalt

# This can be changed to VNC or something, if needed
KVMDISPLAY=-display gtk

# This is the UEFI bios that is used
UCODENAME ?= OVMF_CODE_4M.fd
UCODE=-drive if=pflash,unit=0,format=raw,readonly=on,file=/usr/share/OVMF/$(UCODENAME)

# This is the uefi variable store
UVARSNAME ?= OVMF_VARS_4M.fd
UVARS=-drive if=pflash,unit=1,format=raw,file=src/$(UVARSNAME)
UEFIBOOT=$(UCODE) $(UVARS)

# -vga vmware is to stop grub having issues on startup. Without it, things like
# 'videoinfo' just hang. I found the tip here:
#    https://askubuntu.com/questions/1234203/video-problems-with-efi-boot-on-kvm-qemu
KVMVGA=-vga vmware

# Random UUID for testing
TESTUUID=36e26dd9-91a0-4547-b197-bf28ce57cfe9
SMBIOS=-smbios type=1,manufacturer=HonestRob,product=IsoTest,version=31337,serial=01189998819991197253,uuid=$(TESTUUID)

# This one disables crypto completely, as it's magic (See real-boot.sh)
DTESTUUID=12345678-1234-5678-901b-cddeefaabbcc
DSMBIOS=-smbios type=1,manufacturer=HonestRob,product=IsoTest,version=31337,serial=01189998819991197253,uuid=$(DTESTUUID)

MMCIMAGE=/usr/local/build/mmcblk.raw

# Always prompt for the boot device in BIOS and UEFI, and boot
# the first time the kvm is started from the CDROM image. After that,
# it'll boot to the first boot device (which should be MMCIMAGE above)
UEFIBOOTMENU=-boot menu=on,once=d
BOOTMENU=-boot menu=on,once=d

# If this is running on a dev machine in AU, add a NFS automount to simplify testing
# when testing. But if something has already created NFSHINT, leave it alone
ifndef NFSHINT
ifeq ($(shell ls -ald /sys/class/net/brvl10 2>/dev/null),)
# Not in AU
NFSHINT=
else
NFSSERVER=10.46.80.55
NFSMOUNT=/livebuild/pbxpackages
NFSHINT=$(NFSSERVER):$(NFSMOUNT)
TESTNETCONF=-net nic,model=virtio,macaddr=52:54:00:00:00:01 -net bridge,br=brvl10
endif
endif

TESTDISKIMG=$(SRCDIR)/testdisk.raw
TESTDISKPARAM=-drive format=raw,file=$(TESTDISKIMG),if=virtio,index=5
MMCDISKPARAM= -drive format=raw,file=$(MMCIMAGE),if=virtio,index=1

ifdef HWSMBIOS
TESTSMBIOS=$(HWSMBIOS)
else
TESTSMBIOS=$(SMBIOS)
# REMOVEME: Disable crypto when testing
TESTSMBIOS=$(DSMBIOS)
endif

.PHONY: testdisk
testdisk $(TESTDISKIMG):
	@if [ "$(NFSHINT)" ]; then echo 'nfs:$(NFSHINT)' > $(TESTDISKIMG); else echo > $(TESTDISKIMG); fi
	@truncate --size=1M $(TESTDISKIMG)
	@echo Generated test disk image $(TESTDISKIMG):
	@strings $(TESTDISKIMG)

$(SRCDIR)/testimg.qcow2: | $(SRCDIR)/$(UVARSNAME)
	qemu-img create -f qcow2 src/testimg.qcow2 80G

$(SRCDIR)/OVMF_%.fd:
	@cp /usr/share/OVMF/$(@F) $@

.PHONY: isoclean isotest
isoclean:
	rm -f $(SRCDIR)/testimg.qcow2 $(SRCDIR)/OVMF*
	$(MAKE) isotest

# ISOFINAL is from 002-theme
isotest: $(ISOFINAL) | $(SRCDIR)/testimg.qcow2 /etc/qemu/bridge.conf
	kvm -cpu $(KVMCPU) $(KVMACCEL) -smp cpus=$(KVMCPUS) -m $(KVMRAM) $(KVMNETCONF) $(KVMDISPLAY) \
	-cdrom $< $(UEFIBOOT) -drive file=$(SRCDIR)/testimg.qcow2,cache=unsafe,discard=ignore,detect-zeroes=off $(KVMVGA) $(SMBIOS)

# This does not have full networking, and is purely to be a fast and
# simple way to test the iso.
test: $(ISOFINAL) | $(MMCIMAGE) $(TESTDISKIMG)
	@[ ! -e "$(SRCDIR)/$(UVARSNAME)" ] && $(MAKE) $(SRCDIR)/$(UVARSNAME) || :
	@[ "$(KVMPREREQS)" ] && make $(KVMPREREQS)
	kvm -cpu $(KVMCPU) $(KVMACCEL) -smp cpus=$(KVMCPUS) -m $(KVMRAM) $(KVMDISPLAY) \
	$(UEFIBOOT) $(KVMVGA) $(TESTSMBIOS) \
	-drive file=$<,if=none,id=cdrom,format=raw \
	-device ide-cd,drive=cdrom \
	$(MMCDISKPARAM) \
	$(TESTNETCONF) $(TESTDISKPARAM) $(UEFIBOOTMENU) \
	$(QEMUEXTRA)

# WARNING: If this hangs, or is really slow, you need to turn off
# SSH ObscureKeystrokeTiming. This took an insane amount of time to
# figure out.
# See: https://gitlab.com/qemu-project/qemu/-/issues/2897
biostest: $(ISOFINAL) | $(MMCIMAGE) $(TESTDISKIMG)
	@[ "$(KVMPREREQS)" ] && make $(KVMPREREQS)
	@[ ! -e "$(SRCDIR)/$(UVARSNAME)" ] && $(MAKE) $(SRCDIR)/$(UVARSNAME) || :
	@echo '** WARNING ** -- If this boot hangs, turn off SSH "ObscureKeystrokeTiming" - See Makefile.isotest'
	kvm -cpu $(KVMCPU) $(KVMACCEL) -smp cpus=$(KVMCPUS) -m $(KVMRAM) \
	$(KVMDISPLAY) $(KVMVGA) $(TESTSMBIOS) \
	-drive file=$<,if=none,id=cdrom,format=raw \
	-device ide-cd,drive=cdrom \
	$(MMCDISKPARAM) \
	$(TESTNETCONF) $(TESTDISKPARAM) $(BOOTMENU) \
	$(QEMUEXTRA)


$(MMCIMAGE):
	truncate --size=32G $(MMCIMAGE)

/etc/qemu/bridge.conf:
	@echo 'ERROR: '
	@echo '  QEMU needs to be set up correctly on this host. See Makefile.isotest for guidelines'
	@echo '  Sorry.'
	@exit 99
