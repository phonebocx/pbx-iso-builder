TOOLS += live-build mksquashfs
PKG_mksquashfs=squashfs-tools

LIVECONF=$(shell pwd)/liveconf
export LIVECONF

# External repo disabled, this should be able to build everything
# itself without relying on external things.
#
#REPOSRC=https://repo.phonebo.cx/debian/phonebocx.apt.source
#REPOSRCDEST=$(STAGING)/includes.chroot/etc/apt/sources.list.d/phonebocx.sources
#PUBKEYSRC=https://repo.phonebo.cx/phonebocx.gpg.key
#LIVESRC=https://repo.phonebo.cx/debian/phonebocx.sources
#WGETURL_live.list.chroot=$(REPOSRC)
#WGETURL_phonebocx.key.chroot=$(PUBKEYSRC)
#WGETURL_phonebocx.sources=$(LIVESRC)

#PREREQS += $(STAGING)/archives/live.list.chroot $(STAGING)/archives/phonebocx.key.chroot $(REPOSRCDEST)

# Shims to pick up prereqs in 002-theme, and make sure they're empty
$(SRCDIR)/live.list.chroot $(SRCDIR)/phonebocx.key.chroot $(SRCDIR)/phonebocx.sources:
	echo > $@

# Make sure the linux kernel raid modules are loaded, which is used by mkinitramfs
PREREQS += /proc/mdstat

# This is hacky patch. See below.
PREREQS += /usr/lib/live/build/binary_grub-efi

# This is added to by (at least) the Makefile.kernel and Makefile.dahditools. The sort is to simply
# unique them. This is due to makefiles being included multiple times, which doesn't matter, but it
# can cause some things to complain.
ISODEBS=$(sort $(ALLISODEBS))
.PHONY: debs
debs:
	@echo "Debs to be built and added to the iso are $(ISODEBS)"
export ISODEBS

# ISOFINAL is from 002-theme, which sets ISONAME to $(THEME)-$(BUILD).iso and then puts it in $(ISODEST)
.PHONY: iso
iso: $(ISOFINAL)

# This is what is created by build-live-iso.sh
BUILTISOFILE=$(BUILD)-amd64.hybrid.iso
BUILTISODEST=$(ISOBUILDROOT)/$(BUILTISOFILE)

# $(BUILTISODEST) is not a prereq at the moment, as we only want
# to rebuild it if it's missing.
$(ISOFINAL): # | $(BUILTISODEST)
	@if [ ! -e "$(BUILTISODEST)" ]; then echo "running make $(BUILTISODEST)"; make $(BUILTISODEST); fi
	@echo "Here I am in Makefile.zzz-liveiso starting from $(BUILTISODEST) against $(ISOFINAL)"
	mkdir -p $(@D)
	cp $(BUILTISODEST) $@

# $(PKGDESTDIR)/packages.json is a phony target, and will always run. This
# stages to $(SRCDIR)/packages/$pkgname, and compiles the folders in there
# into $(PKGDESTDIR) (on the OTHER volume, hopefully), which is then imported
# by build-live-iso. I didn't want to faff around with recursive dependancies
# when rsync will do the job perfectly!
.PHONY: reiso
reiso:
	rm -f $(BUILTISODEST) $(ISOFINAL)
	$(MAKE) $(ISOFINAL)

$(BUILTISODEST): setup splash $(THEMEDESTFILES) $(ISODEBS) $(PKGDESTDIR)/packages.json /usr/lib/live/build/binary_grub-efi
	./build-live-iso.sh

# This only rebuilds the binary image, and should only be used for testing
# hooks and things like that.
.PHONY: lbbinary
lbbinary:
	rsync -a ${LIVEBUILDSRC}/ $(ISOBUILDROOT)/config/
	rsync -a ${STAGING}/ $(ISOBUILDROOT)/config/
	cd $(ISOBUILDROOT); lb clean --binary; lb binary
	@echo 'cp $(BUILDISODEST) $(ISOFINAL)'
	@echo 'Or just "make iso" to finish'

# Hack to replace /usr/lib/live/build/binary_grub-efi with a patched one
# that imports extra efi files into the efi.img dosfs. This should be done
# CORRECTLY by either patching it on the fly, or even better, submitting a
# patch upstream, but I'm out of spoons at the moment
/usr/lib/live/build/binary_grub-efi: $(ISOCOMPONENTS)/binary_grub-efi
	cp $< $@

$(STAGING)/archives/%: src/%
	@mkdir -p $(@D)
	cp $< $@

$(REPOSRCDEST): src/phonebocx.sources
	@mkdir -p $(@D)
	cp $< $@

/proc/mdstat:
	@echo Loading mdraid kernel module
	modprobe raid456
